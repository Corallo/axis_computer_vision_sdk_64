#-- Build configuration --#
# ARCH_CFLAGS is supplied as a compile option
ARG ARCH_CFLAGS="-O2 -mthumb -mfpu=neon -mfloat-abi=hard -mcpu=cortex-a9 -fomit-frame-pointer"
# AXIS_ARCH is the AXIS platform descriptor
ARG AXIS_ARCH=aarch64
# BUILD_ROOT defines where in the build containers the building takes place
ARG BUILD_ROOT=/build-root
# DOCKERHUB_ARCH is the DockerHub platform descriptor
ARG DOCKERHUB_ARCH=arm64v8
# OPENCV_MODULES defines what OpenCV modules to build
ARG OPENCV_MODULES=core,imgproc,imgcodecs,videoio,objdetect,python3,video
# SDK_ROOT_DIR defines the root directory of the final SDK images
ARG SDK_ROOT_DIR=/axis/
# UBUNTU_ARCH is the Ubuntu platform descriptor
ARG UBUNTU_ARCH=arm64
# TARGET_TOOLCHAIN is the name of the compilation toolchain for the target platform
ARG TARGET_TOOLCHAIN=aarch64
# TARGET_ROOT defines where in the build containers the resulting application is put
ARG TARGET_ROOT=/target-root
# UBUNTU_VERSION defines the ubuntu version of the build and SDK containers
ARG UBUNTU_VERSION=20.04
# UBUNTU_CODENAME should be the ubuntu codename of the UBUNTU_VERSION used, e.g., focal, hirsute, ..
ARG UBUNTU_CODENAME=focal

#-- Versions of installed packages defined as repository tags --#
ARG NUMPY_VERSION=v1.17.3
ARG OPENBLAS_VERSION=v0.3.14
ARG OPENCV_VERSION=4.5.1
ARG PYTHON_VERSION=3.8.8
ARG PYTESSERACT_VERSION=0.3.7
ARG SCIPY_VERSION=v1.7.1
ARG TESSERACT_VERSION=4.1.1
ARG TFSERVING_VERSION=2.0.0
ARG GCC_VERSION=10.0.0

#-- Build parallelization  --#
ARG OPENBLAS_BUILD_CORES=2
ARG OPENCV_BUILD_CORES=2
ARG PYTHON_BUILD_CORES=4
ARG NUMPY_BUILD_CORES=4
ARG SCIPY_BUILD_CORES=4

#-- ACAP SDK configuration --#
ARG REPO=axisecp
ARG ACAP_SDK_IMAGE=acap-native-sdk
ARG ACAP_SDK_VERSION=1.0_beta2
ARG ACAP_SDK_TAG=${ACAP_SDK_VERSION}-${AXIS_ARCH}-ubuntu20.04


# The ACAP Native SDK is used to get certain libs and headers
FROM ${REPO}/${ACAP_SDK_IMAGE}:${ACAP_SDK_TAG} AS acap-native-sdk
# libs: /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/
# headers: /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/include/


# Create a base image with build tools, env vars, etc.,
FROM ubuntu:${UBUNTU_VERSION} AS build-base

# Setup environment variables
ENV DEBIAN_FRONTEND=noninteractive
ARG BUILD_ROOT
ARG PYTHON_VERSION
ARG TARGET_TOOLCHAIN
ARG TARGET_ROOT
ARG UBUNTU_ARCH
ARG UBUNTU_CODENAME
ARG http_proxy
ARG https_proxy

# To support DOCKER_BUILDKIT=0, base ARGs are converted to ENVs to allow propagation
ENV BUILD_ROOT=$BUILD_ROOT
ENV TARGET_TOOLCHAIN=$TARGET_TOOLCHAIN
ENV TARGET_ROOT=$TARGET_ROOT
ENV UBUNTU_ARCH=$UBUNTU_ARCH
ENV UBUNTU_CODENAME=$UBUNTU_CODENAME
ENV http_proxy=$http_proxy
ENV https_proxy=$https_proxy


# Add source for target arch
RUN echo \
"deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ $UBUNTU_CODENAME main restricted universe multiverse\n\
deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ $UBUNTU_CODENAME-updates main restricted universe multiverse\n\
deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ $UBUNTU_CODENAME-backports main restricted universe multiverse\n\
deb [arch=amd64] http://security.ubuntu.com/ubuntu $UBUNTU_CODENAME-security main restricted universe multiverse\n\
deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME main restricted universe multiverse\n\
deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME-updates main restricted universe multiverse\n\
deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME-backports main restricted universe multiverse\n\
deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME-security main restricted universe multiverse"\
 > /etc/apt/sources.list

# Get crosscompilation toolchain and related packages
RUN dpkg --add-architecture $UBUNTU_ARCH
RUN apt-get update && apt-get install -yf --no-install-recommends \
        autoconf \
        automake \
        autotools-dev \
        build-essential \
        ca-certificates \
        crossbuild-essential-$UBUNTU_ARCH \
        cmake \
        curl \
        gfortran-9-aarch64-linux-gnu \
	gfortran-aarch64-linux-gnu \
        git \
        gfortran \
	g++-10 \
	gcc-10 \
        libtool \
	libgfortran-* \
        pkg-config \
        python3-dev \
        python3-pip \
        python3-venv \
        wget \
 	&& update-ca-certificates \
 	&& apt-get clean

RUN mkdir -p ${TARGET_ROOT}
RUN mkdir -p ${BUILD_ROOT}

# Save a string of what python major.minor version we're using
# for paths, etc.
RUN echo python${PYTHON_VERSION} | sed 's/\([0-9]\.[0-9]*\)\.\([0-9]*\)/\1/' > /tmp/python_version


# Create a emulated base image with build tools, env vars, etc.,
FROM $DOCKERHUB_ARCH/ubuntu:${UBUNTU_VERSION} as build-base-arm
ARG BUILD_ROOT
ENV DEBIAN_FRONTEND=noninteractive
ARG PYTHON_VERSION
ARG TARGET_TOOLCHAIN
ARG TARGET_ROOT
ARG UBUNTU_ARCH
ARG http_proxy
ARG https_proxy

# To support DOCKER_BUILDKIT=0, base ARGs are converted to ENVs to allow propagation
ENV BUILD_ROOT=$BUILD_ROOT
ENV TARGET_TOOLCHAIN=$TARGET_TOOLCHAIN
ENV TARGET_ROOT=$TARGET_ROOT
ENV UBUNTU_ARCH=$UBUNTU_ARCH
ENV http_proxy=$http_proxy
ENV https_proxy=$https_proxy

# qemu is used to emulate arm
COPY --from=multiarch/qemu-user-static:x86_64-arm-5.2.0-2 /usr/bin/qemu-arm-static /usr/bin/

RUN apt-get update && apt-get install -y --no-install-recommends \
        gcc-10 \
	build-essential \
        ca-certificates \
        curl \
        gfortran \
	gfortran-9-aarch64-linux-gnu \
        git \
        pkg-config \
	libgfortran-* \
    && update-ca-certificates

RUN mkdir -p ${TARGET_ROOT}
RUN mkdir -p ${BUILD_ROOT}

# Save a string of what python major.minor version we're using
# for paths, etc.
RUN echo python${PYTHON_VERSION} | sed 's/\([0-9]\.[0-9]*\)\.\([0-9]*\)/\1/' > /tmp/python_version


# Crosscompile OpenBLAS
FROM build-base AS build-openblas
ARG ARCH_CFLAGS
ARG OPENBLAS_BUILD_CORES
ARG OPENBLAS_VERSION
WORKDIR ${BUILD_ROOT}
RUN git clone --depth 1 --branch ${OPENBLAS_VERSION}  https://github.com/xianyi/OpenBLAS.git
WORKDIR ${BUILD_ROOT}/OpenBLAS
RUN HAVE_NEON=1 make -j ${OPENBLAS_BUILD_CORES} TARGET=CORTEXA53 CC=aarch64-linux-gnu-gcc FC=aarch64-linux-gnu-gfortran-9 HOSTCC=gcc-10
RUN make install PREFIX=$TARGET_ROOT/usr


# Crosscompile Python
FROM build-base as build-python-cross
ARG ARCH_CFLAGS
ARG PYTHON_VERSION
ARG PYTHON_BUILD_CORES
RUN mkdir -p $BUILD_ROOT/python_deps
WORKDIR /usr/bin
RUN ln -s python3.*[0-9] python

# Get optional Python module dependencies
RUN apt-get install --reinstall --download-only -o=dir::cache=$BUILD_ROOT/python_deps -y -f \
        libbz2-dev:$UBUNTU_ARCH zlib1g-dev:$UBUNTU_ARCH libssl1.1:$UBUNTU_ARCH libffi-dev:$UBUNTU_ARCH libssl-dev:$UBUNTU_ARCH libreadline6-dev:$UBUNTU_ARCH
WORKDIR $TARGET_ROOT
RUN for f in $BUILD_ROOT/python_deps/archives/*.deb; do dpkg -x $f $TARGET_ROOT; done
RUN mv $TARGET_ROOT/lib/aarch64-linux-gnu/* $TARGET_ROOT/usr/lib/aarch64-linux-gnu/ 
RUN rm -rf $TARGET_ROOT/lib


